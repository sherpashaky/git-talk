Git
---

Git is a distributed version control system.

It's pretty first to get started with and can soon become very addictive as it makes
your work easy and fun. It stays out of your way.

IMHO, for a software developer, git is the best thing since sliced bread. Why do I say so?

* It's easy to get started
    - just create your project directory
    - mkdir git-talk
    - cd git-talk
    - add files to your project e.g a readme file
        cat > README.md
        This is the git talk project
        Ctrl + d
        echo "git is awesome" > overview.txt
    - Now, to create a git repository you use the command
    $ git init  # this creates a git repository in your project folder i.e .git folder
        - you do not need to be connected to the internet or network to get started
    - It is important to configure a name for the author for your repository, it becomes
      easier to indicate that you are the author of the work when you make commits.
    $ git config user.name "Ukang'a Dickson"
    $ git config user.email ukanga@gmail.com
    $ git status  # shows the status of your repository and staging information
        - i.e which files are untracked - not yet added to the repository
        - modified
        - staged for commit: Note you can stage files for commit, and still make changes
          to this files without loosing your changes, i'll show you that in a second
    $ git add README.md overview.txt  # stages files for commit, adding files to your repository
    $ git commit -m 'initial commit'  # commits staged files into your repository,
                                      # creates a hash that you can reference the commit
    $ git log  # view your commit history, shows author, hash reference
    - when you make changes to see the diff of what has changed you use the command
    $ git diff
    - If you had staged your changes, to get the diff
    $ git diff --staged
    - There are times you have files that may be as a result of builds or file editor e.g vim's .swp
      and you want to ensure you do not add these files into the repository. You will need to create
      a .gitignore file, this will contain the name or extension of files you want to ignore.
    - To view the diff of a specific commit
    $ git show e72b7857  # use the hash of the commit, usually the first 5 or so chars are unique.
* Local branching and Merging
    - Unlike CVS or subversion, git provides local branches and merging. This means you can
      create branches on the local machine without connecting to a remote git server as well as
      merge branches. To create a branch
    $ git checkout -b demo-branching
    - You can make commits in the new branch. Branching is the way you adapt to a specific workflow.
    - When you are done with your changes in the current branch and want to apply your changes
      in the master branch, you'll first switch to master branch. Then you will use the merge
      command to merge the changes of the demo-branch into the master branch.
    $ git checkout master
    $ git merge demo-branching
    - Rebasing: you could also rebase instead of merging, this means you will replay your commits
      on top of another branch. In this case, you are getting all the commits in the master branch,
      and then you are applying your new commits on top of the master branch. This does rewrite the
      git history
    $ git rebase master
* Sharing, Remote Server, Contributions
* cherry-picking
    - You can be able to pick a specific commit form a different branch and add it to your branch. This
      is referred to us cherry-picking. Identify the commit using git log and then pick it.
    (demo) $ git log master
    (demo) $ git cherry-pick f43de45
    (demo) $ git log
